# Импортируем необходимые модули и классы
from __future__ import annotations  # Позволяет использовать аннотации типов, которые будут оценены позже
from contextlib import asynccontextmanager  # Асинхронный контекстный менеджер для управления ресурсами


from fastapi import FastAPI, HTTPException, Depends, Response  # Импортируем FastAPI и исключения, а также Depends для внедрения зависимостей

from .doska_obyavleni import Base  # Импортируем базовый класс

from .routers import categories
from .core.database import engine
'''
Описание: Это основной файл вашего приложения FastAPI. Здесь вы инициализируете приложение, настраиваете его и подключаете роутеры.
Зачем нужен:

    Инициализация приложения: Создается экземпляр приложения FastAPI.
    Контекстный менеджер: Определяется асинхронный контекстный менеджер lifespan, который управляет созданием и удалением ресурсов, таких как таблицы базы данных.
    Подключение роутеров: Подключаются различные роутеры (например, роутер для категорий), что позволяет организовать обработку запросов по различным маршрутам.

'''
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Асинхронный контекстный менеджер для создания всех таблиц в базе данных."""
    async with engine.begin() as conn:  # Начинаем асинхронную транзакцию
        await conn.run_sync(Base.metadata.create_all)  # Создаем все таблицы из метаданных
    yield  # Возвращаем управление после создания таблиц
    await engine.dispose()  # Освобождаем ресурсы при завершении работы приложения

# Создаем экземпляр приложения FastAPI с заданным контекстом жизни
app = FastAPI(lifespan=lifespan)  # Инициализация приложения
app.include_router(categories.router) #добавили роутер категория чтобы точки (гет пост) добавить сюда



# routers - нужно чтобы ничо не сломали библиотеки и все такое
'''
Роутеры в FastAPI служат для организации и структурирования вашего кода, что делает его более удобным для разработки и поддержки. Вот несколько ключевых причин, почему стоит использовать роутеры:

    Разделение логики: Роутеры позволяют разделить обработку запросов на разные части приложения. Например, вы можете создать отдельные роутеры для пользователей, товаров, заказов и других сущностей. Это делает код более организованным и легким для понимания.
    Упрощение структуры: Использование роутеров помогает избежать перегруженности основного файла приложения. Вместо того чтобы помещать все маршруты в один файл, вы можете создать несколько файлов с роутерами и подключить их к основному приложению.
    Повторное использование: Роутеры можно легко переиспользовать в разных частях приложения или даже в разных проектах. Вы можете создать общий роутер для API и подключать его к разным приложениям.
    Поддержка версионирования API: С помощью роутеров можно легко управлять версиями вашего API. Например, вы можете создать один роутер для версии 1 (/api/v1/...) и другой для версии 2 (/api/v2/...).
    Группировка маршрутов: Роутеры позволяют группировать маршруты по определенным критериям, например, по функциональности или по типу ресурсов. Это упрощает навигацию по коду и делает его более структурированным.
'''